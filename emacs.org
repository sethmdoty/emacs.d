#+title: Emacs Configuration
#+author: Seth Doty
#+property: header-args :tangle yes

* Table Of Contents                                                :TOC_5_gh:
- [[#package-management][Package Management]]
  - [[#straightel][Straight.el]]
  - [[#editor-configuration][Editor Configuration]]
- [[#buffer-colorize][Buffer Colorize]]
- [[#package-configuration][Package Configuration]]
  - [[#general][General]]
  - [[#ace-window-manager][Ace Window Manager]]
  - [[#yasnippet][Yasnippet]]
  - [[#olivetti][Olivetti]]
  - [[#smartparens][SmartParens]]
  - [[#dired][Dired]]
  - [[#projectile][Projectile]]
  - [[#terminal][Terminal]]
  - [[#helm][Helm]]
  - [[#ivy][Ivy]]
  - [[#git][Git]]
  - [[#company][Company]]
  - [[#deft][Deft]]
  - [[#treemacs][Treemacs]]
- [[#languages][Languages]]
  - [[#docker][Docker]]
  - [[#shell][Shell]]
  - [[#golang][Golang]]
  - [[#lsp-mode][LSP Mode]]
  - [[#javascript][Javascript]]
  - [[#json][JSON]]
  - [[#ruby][Ruby]]
  - [[#rust][Rust]]
  - [[#terraform][Terraform]]
  - [[#web][Web]]
  - [[#python][Python]]
  - [[#markdown][Markdown]]
  - [[#yaml][YAML]]
- [[#org][Org]]
  - [[#org-super-agenda][Org-Super-Agenda]]
  - [[#org-projectile][Org Projectile]]
  - [[#org-cliplink][Org-cliplink]]
  - [[#org-download][Org-Download]]
  - [[#org-ref][Org-Ref]]
  - [[#org-roam][Org Roam]]
  - [[#org-journal][Org Journal]]
  - [[#org-chef][Org-chef]]
  - [[#org-superstar][Org Superstar]]
  - [[#org-reveal][Org Reveal]]

* Package Management
** Straight.el
Set up straight.el
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC
Use use-package as a frontend for straight
#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+END_SRC
** Editor Configuration                                          :noexport_1:
*** Themes

#+begin_src emacs-lisp
(use-package doom-modeline
  :init
  (setq doom-modeline-icon t)
  :config
  (doom-modeline-mode 1))

(use-package doom-themes
  :config (load-theme 'doom-nord t))

(use-package solaire-mode
  :custom (solaire-mode-remap-fringe t)
  :config
  (solaire-mode-swap-bg)
  (solaire-global-mode +1))
#+end_src

*** Keep changes from 'customize' in a seperate file

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/.emacs-customize.el")
(load custom-file)
#+end_src

*** Save all backups in one place

#+begin_src emacs-lisp
(setq backup-directory-alist
      `(("." . ,(concat user-emacs-directory "backups"))))
#+end_src

*** Use `y' or `n' everywhere instead of 'yes' or 'no'

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Enable shift+arrow keys to change active window

#+begin_src emacs-lisp
(use-package windmove
  :ensure nil
  :bind
  (("C-M-<left>". windmove-left)
   ("C-M-<right>". windmove-right)
   ("C-M-<up>". windmove-up)
   ("C-M-<down>". windmove-down)))
#+end_src

*** Enable and configure recentf-mode (recent-files)

#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-saved-items 200)
(setq recentf-max-menu-items 50)
(setq recentf-exclude '("^/var/folders\\.*"
      "COMMIT_EDITMSG\\'"
      ".*-autoloads\\.el\\'"
      "[/\\]\\.elpa/"
      ))
#+end_src

*** Customize titlebar
Show path to file and, if available, the project name.
Set titlebar style

#+begin_src emacs-lisp
(defun frame-title-format ()
  "Return frame title with current project name, where applicable."
  (concat
   "emacs - "
   (when (and (bound-and-true-p projectile-mode)
              (projectile-project-p))
     (format "[%s] - " (projectile-project-name)))
   (let ((file buffer-file-name))
     (if file
          (abbreviate-file-name file)
       "%b"))))

(setq-default frame-title-format '((:eval (frame-title-format))))
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
#+end_src

*** Various small quality of life changes

#+begin_src emacs-lisp
(scroll-bar-mode 0)
(tool-bar-mode 0)
(delete-selection-mode 1)
(global-auto-revert-mode 1)
(line-number-mode 1)
(column-number-mode 1)
(show-paren-mode 1)
(setq show-paren-style 'parenthesis)
(global-hl-line-mode 1)
(eldoc-mode 1)
(setq max-lisp-eval-depth 10000)
#+end_src

*** Enable toggle code foldings with C-c @ C-c

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook (lambda () (interactive)(hs-minor-mode 1)))
#+end_src

*** Enable undo window layout changes with C-c Left and C-c Right

#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

*** Adjust some editor variables
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
(setq ring-bell-function 'ignore)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+end_src

*** Override a couple of default keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

*** Set file encoding preferences
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq-default buffer-file-coding-system 'utf-8-unix)
#+end_src

*** Provide a function to correct line endings
#+begin_src emacs-lisp
(defun dos2unix ()
  "Replace DOS eolns CR LF with Unix eolns CR"
  (interactive)
    (goto-char (point-min))
    (while (search-forward "\r" nil t) (replace-match "")))
#+end_src

*** Add some hooks for saving buffers
#+begin_src emacs-lisp
(add-hook 'focus-out-hook (lambda () (interactive)(save-some-buffers t)))
;; save when frame is closed
(add-hook 'delete-frame-functions (lambda () (interactive)(save-some-buffers t)))
#+end_src

*** Provide custom buffer-cleanup functions
#+begin_src emacs-lisp
(defun kill-dired-buffers ()
  "Kill all dired buffers."
  (interactive)
  (mapc (lambda (buffer)
    (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
      (kill-buffer buffer)))
  (buffer-list)))

 (defun kill-other-buffers ()
"Kill all other buffers."
(interactive)
(mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

*** Mac-specific key-binding changes
#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil))
#+end_src
*** Icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :defer 0.5)
#+end_src

* Buffer Colorize
#+begin_src emacs-lisp
;; load package
(require 'ansi-color)

;; function for colorizing
(defun colorize-buffer ()
  (interactive)
  (toggle-read-only)
  (ansi-color-apply-on-region (point-min) (point-max))
  (toggle-read-only))

;; add hook to apply the function when magit mode is enabled
(add-hook 'magit-mode-hook 'colorize-buffer)
#+end_src
* Package Configuration
** General
#+begin_src emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :demand
  :config
  (global-undo-tree-mode)
  :bind(("C-z" . undo-tree-undo)
        ("C-M-z" . undo-tree-redo)))

(use-package smex)

(use-package dedicated)

(use-package switch-buffer-functions
  :init
  (add-hook 'switch-buffer-functions (lambda (prev cur)
                                       (interactive)
                                       (save-some-buffers t))))

(use-package adaptive-wrap)

(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :config
  (setq exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize))

(use-package visual-regexp)

(use-package diminish
  :config
  (diminish 'auto-revert-mode))

(use-package restclient
  :mode ("\\.rest\\'" . restclient-mode))

(use-package company-restclient
  :hook (restclient-mode . (lambda ()
                             (add-to-list 'company-backends 'company-restclient))))

;;If your using emacs-mac by Yamamoto this will allow ligatures
(if (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode))
#+end_src

** Ace Window Manager
This makes moving around multiple windows a lot easier
#+begin_src emacs-lisp
(use-package ace-window
  :bind([remap other-window] . ace-window)
  :defer 2
  :init
  (setq aw-dispatch-always t)
  :config
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0))))))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :defer 1
  :diminish yas-minor-mode
  :hook
  (prog-mode . yas-minor-mode)
  :config
  (yas-reload-all)
  (setq yas-snippet-dirs
      '("~/.emacs.d/straight/repos/doom-snippets"                 ;; personal snippets
        )))

(use-package doom-snippets
  :straight (:type git :host github :repo "hlissner/doom-snippets")
  :load-path "~/.emacs.d/straight/repos/doom-snippets"
  :after yasnippet)
#+end_src

** Olivetti
A minor mode for a nice writing environment.  This helps improve general word processing type features
#+begin_src emacs-lisp
(use-package olivetti
  :defer t
  :init
  (setq olivetti-body-width 80))
#+end_src

** SmartParens
#+begin_src emacs-lisp
(use-package smartparens
  :defer 1
  :init
  (require 'smartparens-config)
  :config
  (sp-use-smartparens-bindings)
  (smartparens-global-mode 1))
#+end_src

** Dired
These extend the emacs file features a bit to give me a nice sidebar and view when browsing files
#+begin_src emacs-lisp
(use-package dired-subtree)

(use-package all-the-icons-dired)

;;This should allow me to attach messages to mu4e
;;Mark the file in dired and press C-c RET C-a and you will be asked
;; whether to attach to an existing message or create a new one
(require 'gnus-dired)
;; make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
	(set-buffer buffer)
	(when (and (derived-mode-p 'message-mode)
		(null message-sent-message-via))
	  (push (buffer-name buffer) buffers))))
    (nreverse buffers)))

(setq gnus-dired-mail-mode 'mu4e-user-agent)
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :defer 2
  :demand
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map))
  :init
  (setq projectile-switch-project-action 'projectile-vc)
  (setq projectile-mode-line
        '(:eval
          (format " Pr[%s]"
                  (projectile-project-name))))
  :config
  (setq projectile-completion-system 'ivy)
  (projectile-mode))
#+end_src
** Terminal
#+BEGIN_SRC emacs-lisp
  (setq term-buffer-maximum-size 0)
#+END_SRC
Vterm is a term mode that integrates really nicely with emacs keybindings
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :config
    (setq vterm-max-scrollback 100000))
#+END_SRC
For managing multiple vterm buffers
#+BEGIN_SRC emacs-lisp
  (use-package multi-vterm)
#+END_SRC
This lets me have a nice frame open with vterm just by hitting C-t
#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :bind (("C-t" . shell-pop))
  :config
  (defun shell-pop--set-exit-action ()
    (if (string= shell-pop-internal-mode "eshell")
        (add-hook 'eshell-exit-hook 'shell-pop--kill-and-delete-window nil t)
      (let ((process (get-buffer-process (current-buffer))))
        (when process
          (set-process-sentinel
           process
           (lambda (_proc change)
             (when (string-match-p "\\(?:finished\\|exited\\)" change)
               (if (one-window-p)
                   (switch-to-buffer shell-pop-last-buffer)
                 (kill-buffer-and-window)))))))))

  (custom-set-variables
   '(shell-pop-shell-type (quote ("vterm" "*vterm*" (lambda nil (vterm)))))
   '(shell-pop-term-shell "/usr/local/bin/zsh")
   '(shell-pop-window-position "bottom")))
#+end_src
** Helm
Helm just makes everything better
#+begin_src emacs-lisp
;; (use-package helm
;;   :demand
;;   :diminish helm-mode
;;   :init
;;   :bind(("C-x f" . helm-recentf)
;;   ("C-x b" . helm-mini)
;;   ("C-c s" . helm-occur)
;;   ("C-c S" . helm-moccur)
;;   ("C-x C-b" . helm-buffers-list)
;;   ("C-x C-f" . helm-find-files)
;;   ("C-x C-r" . helm-resume))
;;   :config
;;   (helm-mode 1))

;; (use-package helm-swoop
;;   :after (helm)
;;   :bind
;;   (("M-i" . helm-swoop)
;;    ("C-c M-i" . helm-multi-swoop)
;;    ("M-I" . helm-swoop-back-to-last-point)
;;    ("C-x M-i" . helm-multi-swoop-all)))

;; (use-package helm-smex
;;   :after (helm smex)
;;   :init
;;   (setq helm-smex-show-bindings t)
;;   :bind(([remap execute-extended-command] . helm-smex)
;;   ("M-X" . helm-smex-major-mode-commands)))

;; (use-package helm-projectile
;;   :after (projectile helm)
;;   :config
;;   (helm-projectile-on))

;; (use-package helm-flx
;;   :after (helm)
;;   :config
;;   (helm-flx-mode 1))

;; (use-package helm-fuzzier
;;   :after (helm)
;;   :config
;;   (helm-fuzzier-mode 1))

;; (use-package helm-rg
;;   :after (helm))

;; (use-package helm-org
;;   :defer 10)

;; (use-package helm-company
;;   :after (helm company)
;;   :bind (:map company-mode-map ("C-:" . helm-company)
;;          :map company-active-map ("C-:" . helm-company)))
#+end_src
** Ivy
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (:map ivy-minibuffer-map
              ("C-w" . ivy-yank-word)           ;; make work like isearch
              ("C-r" . ivy-previous-line)
              ("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-initial-inputs-alist nil)           ;; no regexp by default
  (setq ivy-rich-path-style 'abbrev)
  (setq ivy-use-virtual-buffers t
            ivy-count-format "%d/%d ")
  (setq ivy-re-builders-alist                   ;; allow input not in order
        '((t . ivy--regex-ignore-order))))

(use-package ivy-rich
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
                          ivy-rich-switch-buffer-align-virtual-buffer t
                          ivy-rich-path-style 'abbrev)
  :config
  (ivy-rich-mode 1)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))

(use-package all-the-icons-ivy
  :after (all-the-icons ivy)
  :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window))
  :config
  (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
  (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
  (all-the-icons-ivy-setup))

(use-package counsel
  :after ivy
  :diminish counsel-mode
  :bind (([remap execute-extended-command] . counsel-M-x)
         ([remap find-file]                . counsel-find-file)
         ([remap find-library]             . find-library)
         ([remap imenu]                    . counsel-imenu)
         ([remap recentf-open-files]       . counsel-recentf)
         ([remap org-capture]              . counsel-org-capture)
         ([remap swiper]                   . counsel-grep-or-swiper) ;; large files
         ([remap describe-face]            . counsel-describe-face)
         ([remap describe-function]        . counsel-describe-function)
         ([remap describe-variable]        . counsel-describe-variable)
         ;; completion
         ;; ([remap completion-at-point]      . counsel-company)
         ;; kill-ring
         ("M-y"     . counsel-yank-pop)
         ;; mark-ring
         ("C-x SPC" . counsel-mark-ring)
         ;; register
         ("C-x r"   . counsel-register)
         ;; ripgrep
         ("C-c k" . counsel-rg)
         ;; bookmark (Emacs default; =C-x r b= to create bookmark)
         ("C-x b"   . counsel-bookmark)
         ;;switch buffer override
         ("C-x C-b" . counsel-switch-buffer)
         ;; code overview
         ("C-x i"   . counsel-semantic-or-imenu))
  :config (counsel-mode)
  :custom (counsel-rg-base-command "rg -S -M 150 --no-heading --line-number --color never %s"))

  (use-package counsel-projectile
    :init
    (setq projectile-completion-system 'ivy)
    :config
    (counsel-projectile-mode t)
    (defun sk/counsel-ag-project-at-point ()
      "use counsel ag to search for the word at point in the project"
      (interactive)
      (counsel-ag (thing-at-point 'symbol) (projectile-project-root)))
    (defun sk/counsel-ag-project ()
      "use counsel ag to search the project"
      (interactive)
      (counsel-ag "" (projectile-project-root))))

(use-package counsel-codesearch)
(use-package swiper
      :after ivy
      :bind (("C-s" . swiper)
         ("C-r" . swiper)))
(use-package avy
  :bind (("C-:" . avy-goto-char)))
(use-package prescient)
  (use-package ivy-prescient
    :config
    (ivy-prescient-mode t))
#+end_src

** Git
#+begin_src emacs-lisp
(use-package magit
  :defer 1
  :init
  (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1 )
  :bind("C-x g" . magit-status)
  :config
  ;; Protect against accident pushes to upstream
  (defadvice magit-push-current-to-upstream
(around my-protect-accidental-magit-push-current-to-upstream)
    "Protect against accidental push to upstream.

    Causes `magit-git-push' to ask the user for confirmation first."
    (let ((my-magit-ask-before-push t))
ad-do-it))

  (defadvice magit-git-push (around my-protect-accidental-magit-git-push)
    "Maybe ask the user for confirmation before pushing.

    Advice to `magit-push-current-to-upstream' triggers this query."
    (if (bound-and-true-p my-magit-ask-before-push)
  ;; Arglist is (BRANCH TARGET ARGS)
  (if (yes-or-no-p (format "Push %s branch upstream to %s? "
         (ad-get-arg 0) (ad-get-arg 1)))
      ad-do-it
    (error "Push to upstream aborted by user"))
ad-do-it))

  (ad-activate 'magit-push-current-to-upstream)
  (ad-activate 'magit-git-push))

(use-package forge
  :after magit)

(use-package git-link)

(use-package gitignore-mode)

(use-package diff-hl
  :config
  (global-diff-hl-mode))
#+end_src
** Company
#+begin_src emacs-lisp
(use-package company
  :diminish company-mode
  :defer 1
  :delight
  :config
  ;; Search other buffers for compleition candidates
  (setq company-dabbrev-other-buffers t)
  (setq company-dabbrev-code-other-buffers t)

  ;; Show candidates according to importance, then case, then in-buffer frequency
  (setq company-transformers '(company-sort-by-backend-importance
                         company-sort-prefer-same-case-prefix
                         company-sort-by-occurrence))

   ;; Flushright any annotations for a compleition;
   ;; e.g., the description of what a snippet template word expands into.
   company-tooltip-align-annotations t
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)

  (global-company-mode t))

(use-package company-quickhelp
  :after (company)
  :config
  (company-quickhelp-mode))
#+end_src
** Deft
I need a better way to search through my org notes.  If I can't find it with this, a ripgrep will usually get the job done.
#+begin_src emacs-lisp
(use-package deft
  :bind ("<f8>" . deft)
  :commands (deft)
  :config
  (setq deft-extensions '("txt" "tex" "org"))
  (setq deft-directory "~/org")
  (setq deft-recursive t)
  (setq deft-use-filename-as-title t))
#+end_src
** Treemacs
Mostly I keep this around for lsp server integration, but its nice for various projects when I have to hop around
#+begin_src emacs-lisp
(use-package treemacs
  :config
  (global-set-key (kbd "<f12>") 'treemacs)
  )

(use-package treemacs-projectile
  :after treemacs projectile)

(use-package treemacs-magit
  :after treemacs magit)

(use-package lsp-treemacs
  :after treemacs)
#+end_src

* Languages
** Docker
#+begin_src emacs-lisp
(use-package docker-compose-mode)
(use-package dockerfile-mode)
(use-package dotenv-mode)
#+end_src
** Shell
#+begin_src emacs-lisp
;;Make sure you have shellcheck installed for this to work
(use-package flymake-shellcheck
  :commands flymake-shellcheck-load
  :init
  (add-hook 'sh-mode-hook 'flymake-shellcheck-load))

;;This makes your shell script executable after you save
(use-package sh-script
  :ensure nil
  :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src
** Golang
#+begin_src emacs-lisp
(defun my-go-mode-hook ()
  (add-hook 'before-save-hook 'gofmt-before-save))
(use-package go-mode
  :hook (go-mode-hook my-go-mode-hook))
(use-package company-go)
(use-package go-projectile 
   :demand t)
(use-package flymake-go)
(add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
#+end_src
** LSP Mode
Lsp allows us to utilize the same interface to multiple languages
#+begin_src emacs-lisp
(use-package lsp-mode 
  :diminish (lsp-mode . "lsp") 
  :bind (:map lsp-mode-map 
    ("C-c C-d" . lsp-describe-thing-at-point)) 
  :hook (
    (python-mode . #'lsp-deferred) 
    (js-mode . #'lsp-deferred)
    (dockerfile-mode . #'lsp-deferred)
    (terraform-mode . #'lsp-deferred)
    (sh-mode . #'lsp-deferred)
    (go-mode-hook . #'lsp-deferred)) 
  :init 
  (setq lsp-auto-guess-root t       ; Detect project root 
   lsp-log-io nil 
   lsp-enable-indentation t 
   lsp-enable-imenu t 
   lsp-keymap-prefix "C-l" 
   lsp-file-watch-threshold 500 
   lsp-prefer-flymake nil)      ; Use lsp-ui and flycheck 
 
  (defun lsp-on-save-operation () 
    (when (or (boundp 'lsp-mode) 
         (bound-p 'lsp-deferred)) 
      (lsp-organize-imports) 
      (lsp-format-buffer))))

(use-package lsp-ui 
  :after (lsp-mode) 
  :commands lsp-ui-doc-hide 
  :bind (:map lsp-ui-mode-map 
         ([remap xref-find-definitions] . lsp-ui-peek-find-definitions) 
         ([remap xref-find-references] . lsp-ui-peek-find-references) 
         ("C-c u" . lsp-ui-imenu)) 
  :init (setq lsp-ui-doc-enable t 
         lsp-ui-doc-use-webkit nil 
         lsp-ui-doc-header nil 
         lsp-ui-doc-delay 0.2 
         lsp-ui-doc-include-signature t 
         lsp-ui-doc-alignment 'at-point 
         lsp-ui-doc-use-childframe nil 
         lsp-ui-doc-border (face-foreground 'default) 
         lsp-ui-peek-enable t 
         lsp-ui-peek-show-directory t 
         lsp-ui-sideline-update-mode 'line 
         lsp-ui-sideline-enable t 
         lsp-ui-sideline-show-code-actions t 
         lsp-ui-sideline-show-hover nil 
         lsp-ui-sideline-ignore-duplicate t) 
  :config 
  (add-to-list 'lsp-ui-doc-frame-parameters '(right-fringe . 8)) 
 
  ;; `C-g'to close doc 
  (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide) 
 
  ;; Reset `lsp-ui-doc-background' after loading theme 
  (add-hook 'after-load-theme-hook 
       (lambda () 
         (setq lsp-ui-doc-border (face-foreground 'default)) 
         (set-face-background 'lsp-ui-doc-background 
                              (face-background 'tooltip)))) 
 
  ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer 
  ;; @see https://github.com/emacs-lsp/lsp-ui/issues/243 
  (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate) 
    (setq mode-line-format nil)))

;; Debug 
(use-package dap-mode 
  :diminish dap-mode 
  :after (lsp-mode) 
  :functions dap-hydra/nil 
  :bind (:map lsp-mode-map 
         ("<f5>" . dap-debug) 
         ("M-<f5>" . dap-hydra)) 
  :hook ((dap-mode . dap-ui-mode) 
    (dap-session-created . (lambda (&_rest) (dap-hydra))) 
    (dap-terminated . (lambda (&_rest) (dap-hydra/nil))))) 
 
(use-package lsp-treemacs 
  :after (lsp-mode treemacs) 
  :commands lsp-treemacs-errors-list 
  :bind (:map lsp-mode-map 
         ("M-9" . lsp-treemacs-errors-list))) 

;; (use-package helm-lsp 
;;   :after (lsp-mode) 
;;   :commands (helm-lsp-workspace-symbol) 
;;   :init (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))

  (use-package lsp-ivy
    :after (lsp-mode)
    :commands (lsp-ivy-workspace-symbol))
#+end_src

** Javascript
#+begin_src emacs-lisp
(setq js-switch-indent-offset 2)
(setq js-indent-level 2)

(add-to-list 'auto-mode-alist '("\\.js\\'" . js-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . js-mode))
(add-to-list 'auto-mode-alist '("\\.ts\\'" . js-mode))
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . js-mode))

(use-package js2-mode
  :init
  (setq js2-mode-show-parse-errors nil)
  (setq js2-mode-show-strict-warnings nil)
  :hook
  (js-mode . js2-minor-mode))

(use-package eslint-fix)

(use-package js2-refactor
  :hook (js-mode . js2-refactor-mode)
  :config
  (js2r-add-keybindings-with-prefix "C-c C-m"))

(use-package add-node-modules-path
  :hook (js-mode . add-node-modules-path))

(use-package indium
  :diminish (indium-interaction-mode . "In" )
  :hook (js-mode . indium-interaction-mode))

(use-package prettier-js
   :after add-node-modules-path
   :hook (js-mode . prettier-js-mode))
#+end_src

** JSON
#+begin_src emacs-lisp
;;JSON
(use-package json-mode
  :mode (("\\.json\\'" . json-mode)
   ("\\manifest.webapp\\'" . json-mode )
   ("\\.tern-project\\'" . json-mode)))
#+end_src

** Ruby
#+begin_src emacs-lisp
(use-package ruby-mode
  :mode (("\\.rb\\'" . ruby-mode)
  ("\\.rake\\'" . ruby-mode)
  ("\\.Rakefile\\'" . ruby-mode)
  ("\\Gemfile\\'" . ruby-mode)))

(use-package rvm
  :config
  (rvm-use-default))

;; a lint checker for ruby
(use-package rubocop
  :init
  (add-hook 'ruby-mode-hook 'rubocop-mode)
  :diminish rubocop-mode)
#+end_src
** Rust
#+begin_src emacs-lisp
(use-package rust-mode
   :init
   (setq rust-format-on-save t)
   :hook (add-hook 'rust-mode-hook 'lsp))

(use-package flycheck-rust
  :hook (flycheck-mode-hook #'flycheck-rust-setup))

(use-package cargo
  :hook (rust-mode cargo-minor-mode))

;; Toml:
(use-package toml-mode
  :defer t
  :config (progn (add-hook 'toml-mode-hook 'prog-minor-modes-common)))

;;Lets use the new lsp
(setq lsp-rust-server 'rust-analyzer)
;;Various quality of life settings for rust
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
(add-hook 'rust-mode-hook 'lsp)
(add-hook 'rust-mode-hook 'company-mode)
(add-hook 'flycheck-mode-hook 'flycheck-rust-setup)
#+end_src
** Terraform
#+begin_src emacs-lisp
(use-package terraform-mode)

(use-package company-terraform
  :config (company-terraform-init)
  :hook (add-to-list 'company-backends 'company-terraform))
#+end_src

** Web
#+begin_src emacs-lisp
(use-package web-mode
  :mode (("\\.phtml\\'" . web-mode)
   ("\\.tpl\\.php\\'" . web-mode)
   ("\\.blade\\.php\\'" . web-mode)
   ("\\.jsp\\'" . web-mode)
   ("\\.as[cp]x\\'" . web-mode)
   ("\\.erb\\'" . web-mode)
   ("\\.html?\\'" . web-mode)
   ("\\.ejs\\'" . web-mode)
   ("\\.php\\'" . web-mode)
   ("\\.mustache\\'" . web-mode)
   ("/\\(views\\|html\\|theme\\|templates\\)/.*\\.php\\'" . web-mode))
  :init
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-attr-indent-offset 2)
  (setq web-mode-attr-value-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-comment-keywords t)
  (setq web-mode-enable-current-element-highlight t))

(use-package company-web
  :hook (web-mode . (lambda ()
    (add-to-list 'company-backends 'company-web-html)
    (add-to-list 'company-backends 'company-web-jade)
    (add-to-list 'company-backends 'company-web-slim))))

(use-package emmet-mode
  :hook (web-mode sgml-mode html-mode css-mode))

(use-package rainbow-mode
  :pin gnu
  :hook css-mode)

(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

(use-package simple-httpd)

(use-package impatient-mode)
#+end_src

** Python
#+begin_src emacs-lisp
(use-package python
  :defer t
  :init
  (add-hook 'python-mode-hook 'lsp)
  (setq-default python-shell-interpreter "python3"))

(use-package blacken)

(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))

(use-package lsp-python-ms
:init
  (setq lsp-python-ms-python-executable-cmd "python3")
:hook (python-mode . (lambda ()
                        (require 'lsp-python-ms)
                        (lsp))))  ; or lsp-deferred

(use-package pyvenv
  :defer t
  :init
  (add-hook 'pyvenv-post-activate-hooks 'lsp-restart-workspace)
  (add-hook 'pyvenv-post-deactivate-hooks 'lsp-restart-workspace))
#+end_src

** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
   ("\\.md\\'" . markdown-mode)
   ("\\.markdown\\'" . markdown-mode))
  :init
  (setq markdown-command "multimarkdown")
  (setq markdown-header-scaling t))
#+end_src

** YAML
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode 
    ("\\.yaml\\'" . yaml-mode)
    ("\\.yml\\'" . yaml-mode))
#+end_src
* Org
#+begin_src emacs-lisp
(use-package ob-restclient)
(use-package ob-browser)
(use-package org
:demand t
:mode ("\\.org\\'" . org-mode)
:preface
  (defvar my/org-basic-task-template "* TODO %a %^{Task}
:PROPERTIES:
:SOURCE:
:END:
Captured %<%Y-%m-%d %H:%M>" "Template for basic task.")

  (defvar my/org-basic-note-template "* %^{TITLE} 
:PROPERTIES:
:SOURCE:
:END:
\n%i%?" "Template for basic notes.")1

(defvar my/org-cookbook-template "* %^{Recipe title:}
  :PROPERTIES:
  :source-url:
  :servings:
  :prep-time:
  :cook-time:
  :ready-in:
  :END:
  Ingredients\n 
  %?\n
  ,** Directions\n")

 (defvar my/org-web-bookmark-template "* %(org-cliplink-capture)
:PROPERTIES:
:BOOKMARK:
:CREATED %U
:END:")

  (defun my/create-zet-file ()
    "Create an org file in ~/org/roam"
    (interactive)
    (let ((name (read-string "Filename: ")))
      (expand-file-name (format "%s-%s.org"(format-time-string "%Y%m%d%H%M%S")
                                  name) "~/org/roam/")))
  :init
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-window-setup 'current-window)
  (setq org-startup-folded nil)
  (setq org-edit-src-content-indentation 0)
  (setq org-startup-indented t)
  (setq org-fontify-whole-heading-line t)
  (setq org-pretty-entities t)
  (setq org-hide-leading-stars t)
  (setq org-agenda-files (list "~/org/org-files/"))
  :bind
  (("C-c l" . 'org-store-link)
   ("C-c a" . 'org-agenda)
   ("C-c c" . 'org-capture))

:config
(require 'org-habit)
(require 'org-capture)
(add-to-list 'org-capture-templates
             `("s" "Scratch File" entry (file "~/org/scratch/scratch.org")))
(add-to-list 'org-capture-templates
             `("l" "Links" entry(file my/create-zet-file),
      my/org-web-bookmark-template
      :empty-lines 1))
(add-to-list 'org-capture-templates
             `("b" "Cookbook" entry (file "~/org/org-files/cookbook.org")
      "%(org-chef-get-recipe-from-url)"
         :empty-lines 1))
(add-to-list 'org-capture-templates
             `("m" "Manual Cookbook" entry (file "~/org/org-files/cookbook.org"),
        my/org-cookbook-template
        :empty-lines 1))
(add-to-list 'org-capture-templates
             `("n" "Notes" entry (file my/create-zet-file),
      my/org-basic-note-template
      :empty-lines 1))
(add-to-list 'org-capture-templates
             `("j" "Journal entry" entry (function org-journal-find-location)
       "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?"))
(add-to-list 'org-capture-templates
             `("f" "File email (mu4e)" entry (file+headline "~/org/org-files/todo.org" "Email")
                   "* %a by [[mailto:%:fromaddress][%:fromname]]\n%U\n\n%i%?\n"))
(add-to-list 'org-capture-templates
             `("t" "Task" entry (file+headline "~/org/org-files/todo.org" "Tasks"),
      my/org-basic-task-template
      :empty-lines 1))
(setq org-directory "~/org/org-files/")
   ;; Split up the search string on whitespace
  (setq org-agenda-search-view-always-boolean t)
  ;;Do not make last capture bookmarks.  I do not like them
  (setq org-capture-bookmark nil)
  ;;Set Keywords
    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
        (sequence "WAITING(w)" "|" "CANCELLED(c)")))
  ;; My Default org-mode tags
    (setq org-tag-alist '(("@coding" . ?c)
                   ("@email" . ?e)
                   ("@home" . ?h)
                   ("@reading" . ?r)
                   ("@learning" . ?l)
                   ("@work" . ?b)
                   ("@writing" . ?w)))
  ;; Log when task complete
  (setq org-log-done t)
  ;; Behaviour for capturing notes using make-capture-frame
  (defadvice org-capture-finalize
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame"
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

(defadvice org-capture-destroy
    (after delete-capture-frame activate)
  "Advise capture-destroy to close the frame"
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

(defadvice org-switch-to-buffer-other-window
    (after supress-window-splitting activate)
  "Delete the extra window if we're in a capture frame"
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-other-windows)))
  ;;What languages do we care to do
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t)
     (browser . t)
     (shell . t)
     (scheme . t)
     (gnuplot . t)
     (plantuml . t)
     (js . t)))
(org-reload))

(use-package org-plus-contrib
   :mode (("\\.org$" . org-mode))
   :bind
   ("C-c l" . org-store-link)
   ("C-c a" . org-agenda))

  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-enable))
#+end_src
** Org-Super-Agenda
I primarily use this for cleaning up the agenda view so that I can get better header filtering and remove duplicates in my agenda
#+begin_src emacs-lisp
(use-package org-super-agenda
   :after org-agenda
   :init
  (setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-compact-blocks t
      org-agenda-start-day nil ;; i.e. today
      org-agenda-span 1
      org-agenda-start-on-weekday nil)
  (setq org-agenda-custom-commands
        '(("c" "Super view"
           ((agenda "" ((org-agenda-overriding-header "")
                        (org-super-agenda-groups
                         '((:name "Today"
                                  :time-grid t
                                  :date today
                                  :order 1)))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:log t)
                            (:name "Next to do"
                                   :todo "NEXT"
                                   :order 1)
                            (:name "Important"
                                   :priority "A"
                                   :order 6)
                            (:name "Today's tasks"
                                   :file-path "journal/")
                            (:name "Due Today"
                                   :deadline today
                                   :order 2)
                            (:name "Scheduled Soon"
                                   :scheduled future
                                   :order 8)
                            (:name "Overdue"
                                   :deadline past
                                   :order 7)
                            (:discard (:not (:todo "TODO")))))))))))
  :config
  (org-super-agenda-mode))
#+end_src
** Org Projectile
#+begin_src emacs-lisp
(use-package org-projectile
  :bind (("C-c n p" . org-projectile-project-todo-completing-read)
         ("C-c c" . org-capture))
  :config
  (progn
    (setq org-projectile-projects-file
          "~/org/org-files/projects.org")
    (setq    (add-to-list 'org-capture-templates
                 (org-projectile-project-todo-entry
                  :capture-character "p")))
    (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
    (push (org-projectile-project-todo-entry) org-capture-templates)))

;; (use-package org-projectile-helm
;;   :after org-projectile
;;   :bind (("C-c n p" . org-projectile-helm-template-or-project)))

#+end_src
** Org-cliplink
org-cliplink lets you insert a link from your clipboard with a title fetched from the pages metadata
#+begin_src emacs-lisp
(use-package org-cliplink
  :bind ("C-x p i" . org-cliplink))
#+end_src
** Org-Download
https://github.com/abo-abo/org-download Lets me drop and capture images into my org files
#+begin_src emacs-lisp
(use-package org-download
  :after org
  :bind
  (:map org-mode-map
        (("s-Y" . org-download-screenshot)
         ("s-y" . org-download-yank))))
#+end_src
** Org-Ref
Captures bibtext entries in an org file, and can look them up online.
#+begin_src emacs-lisp
  (use-package org-ref
    :after org
    :init
    (setq reftex-default-bibliography '("~/org/bibliography/references.bib"))
    (setq org-ref-bibliography-notes "~/org/bibliography/notes.org"
        org-ref-default-bibliography '("~/org/bibliography/references.bib")
        org-ref-pdf-directory "~/org/bibliography/bibtex-pdfs/"))

  ;; (use-package helm-bibtex
  ;;   :init
  ;;    (setq bibtex-completion-bibliography "~/org/bibliography/references.bib"
  ;;       bibtex-completion-library-path "~/org/bibliography/bibtex-pdfs"
  ;;       bibtex-completion-notes-path "~/org/bibliography/helm-bibtex-notes")
  ;;    ;; open pdf with system pdf viewer (works on mac)
  ;;    (setq bibtex-completion-pdf-open-function
  ;;      (lambda (fpath)
  ;;        (start-process "open" "*open*" "open" fpath))))
  (use-package ivy-bibtex
    :bind ("C-c b b" . ivy-bibtex)
    :config
    (setq bibtex-completion-bibliography 
          '("~/org/bibliography/references.bib"))
    (setq bibtex-completion-notes-path "~/org/bibliography/helm-bibtex-notes")
    (setq bibtex-completion-library-path 
          '(bibtex-completion-library-path "~/org/bibliography/bibtex-pdfs"))

    ;; using bibtex path reference to pdf file
    (setq bibtex-completion-pdf-field "File")

    (setq ivy-bibtex-default-action 'bibtex-completion-insert-citation))
#+end_src
** Org Roam
#+begin_src emacs-lisp
(use-package org-roam
      :hook (after-init . org-roam-mode)
      :custom
      (org-roam-directory "~/org/roam/")
      (org-roam-completion-system 'ivy)
      (org-roam-capture-templates
      '(("d" "default" plain (function org-roam--capture-get-point)
     "\n-tags::\n%?"
     :file-name "%<%Y%m%d%H%M%S>-${slug}"
     :head "#+TITLE: ${title}"
     :unnarrowed t)))
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n c" . org-roam-capture)
               ("C-c n g" . org-roam-show-graph))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))))

(use-package company-org-roam
      :config
      (push 'company-org-roam company-backends))
#+end_src
** Org Journal
#+begin_src emacs-lisp
(use-package org-journal
  :after org
  :custom
  (org-journal-date-format "%e %b %Y (%A)")
  (org-journal-enable-agenda-integration t)
  (org-journal-dir (format "~/org/journal/" (format-time-string "%Y")))
  (org-journal-file-format "%Y%m%d")
  (org-journal-time-format ""))
#+end_src
** Org-chef
This package lets me manage recipes in org-mode.  It captures the link from the clipboard and grabs what it can
#+begin_src emacs-lisp
(use-package org-chef)
#+end_src
** Org Superstar
Its like org-bullets, but better
#+begin_src emacs-lisp
(use-package org-superstar
  :init
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))) 
#+end_src
** Org Reveal
#+begin_src emacs-lisp
(use-package ox-reveal
  :config
  (setq org-reveal-root "file:///~/Documents/reveal.js"))
#+end_src
