#+TITLE: Emacs Configuration
#+AUTHOR: Seth Doty
#+PROPERTY: header-args :tangle yes

* Table Of Contents                                                :TOC_5_gh:
- [[#configuration][Configuration]]
  - [[#package-management][Package Management]]
    - [[#sources][Sources]]
    - [[#fonts][Fonts]]
    - [[#use-package][Use-Package]]
  - [[#editor-configuration][Editor Configuration]]
  - [[#buffer-colorize][Buffer Colorize]]
  - [[#ediff][Ediff]]
  - [[#package-configuration][Package Configuration]]
    - [[#general][General]]
      - [[#ssh-agency][ssh-agency]]
      - [[#terminal][Terminal]]
      - [[#flycheck][FlyCheck]]
      - [[#mu4e][MU4E]]
        - [[#mu4e-encryption][MU4E Encryption]]
      - [[#helm][Helm]]
      - [[#git][Git]]
      - [[#org][Org]]
        - [[#org-crypt][Org Crypt]]
        - [[#org-cliplink][Org-cliplink]]
        - [[#org-capture-templates][Org Capture Templates]]
        - [[#org-journal][Org Journal]]
        - [[#org-contacts][Org Contacts]]
        - [[#org-superstar][Org Superstar]]
        - [[#org-caldav][Org Caldav]]
      - [[#company][Company]]
      - [[#deft][Deft]]
      - [[#perspective-mode][Perspective Mode]]
    - [[#languages][Languages]]
      - [[#docker][Docker]]
      - [[#shell][Shell]]
      - [[#golang][Golang]]
      - [[#lsp-mode][LSP Mode]]
      - [[#javascript][Javascript]]
      - [[#json][JSON]]
      - [[#rust][Rust]]
      - [[#terraform][Terraform]]
      - [[#web][Web]]
      - [[#python][Python]]
      - [[#markdown][Markdown]]
      - [[#lua][Lua]]
      - [[#yaml][YAML]]
  - [[#review-and-remove][Review and remove]]
      - [[#ledger-mode][Ledger mode]]

* Configuration

** Package Management
*** Sources
First we're going to add [[melpa.org][melpa]] as a source for packages

#+BEGIN_SRC emacs-lisp
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (add-to-list 'package-archives (cons "org" (concat proto "://orgmode.org/elpa/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
(package-initialize)
 #+END_SRC

*** Fonts

Mono Fonts are great for development, but we need something pretty for general writing.  
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "JetBrains Mono Medium")
(set-fontset-font t 'latin "Noto Sans")
#+END_SRC


*** Use-Package

Make sure [[https://github.com/jwiegley/use-package][use-package]] is available, if it's not we install it.

 #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   (setq use-package-ensure-all t)
   (require 'use-package)
 #+END_SRC

** Editor Configuration                                         :noexport_1:

*** Keep changes from 'customize' in a seperate file

 #+BEGIN_SRC emacs-lisp
   (setq custom-file "~/.emacs.d/.emacs-customize.el")
   (load custom-file)
 #+END_SRC

*** Save all backups in one place

 #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist
          `(("." . ,(concat user-emacs-directory "backups"))))
 #+END_SRC

*** Use `y' or `n' everywhere instead of 'yes' or 'no'

 #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
 #+END_SRC

*** Enable shift+arrow keys to change active window

#+BEGIN_SRC emacs-lisp
(use-package windmove
  :ensure nil
  :bind
  (("C-M-<left>". windmove-left)
   ("C-M-<right>". windmove-right)
   ("C-M-<up>". windmove-up)
   ("C-M-<down>". windmove-down)))
#+END_SRC

*** Enable and configure recentf-mode (recent-files)

#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-saved-items 200)
  (setq recentf-max-menu-items 50)
  (setq recentf-exclude '("^/var/folders\\.*"
        "COMMIT_EDITMSG\\'"
        ".*-autoloads\\.el\\'"
        "[/\\]\\.elpa/"
        ))
#+END_SRC

*** Customize titlebar
Show path to file and, if available, the project name.
Set titlebar style

#+BEGIN_SRC emacs-lisp
(defun frame-title-format ()
  "Return frame title with current project name, where applicable."
  (concat
   "emacs - "
   (when (and (bound-and-true-p projectile-mode)
              (projectile-project-p))
     (format "[%s] - " (projectile-project-name)))
   (let ((file buffer-file-name))
     (if file
          (abbreviate-file-name file)
       "%b"))))

(setq-default frame-title-format '((:eval (frame-title-format))))
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
#+END_SRC

*** Various small quality of life changes

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode 0)
(tool-bar-mode 0)
(delete-selection-mode 1)
(global-auto-revert-mode 1)
(line-number-mode 1)
(column-number-mode 1)
(show-paren-mode 1)
(setq show-paren-style 'parenthesis)
(global-hl-line-mode 1)
(eldoc-mode 1)
(setq max-lisp-eval-depth 10000)
#+END_SRC

*** Enable toggle code foldings with C-c @ C-c

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (interactive)(hs-minor-mode 1)))
#+END_SRC

*** Enable undo window layout changes with C-c Left and C-c Right

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

*** Adjust some editor variables
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq ring-bell-function 'ignore)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
#+END_SRC

*** Override a couple of default keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

#+END_SRC

*** Set file encoding preferences
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8-unix)
#+END_SRC

*** Provide a function to correct line endings
#+BEGIN_SRC emacs-lisp
  (defun dos2unix ()
    "Replace DOS eolns CR LF with Unix eolns CR"
    (interactive)
      (goto-char (point-min))
      (while (search-forward "\r" nil t) (replace-match "")))
#+END_SRC

*** Add some hooks for saving buffers
#+BEGIN_SRC emacs-lisp
  (add-hook 'focus-out-hook (lambda () (interactive)(save-some-buffers t)))
  ;; save when frame is closed
  (add-hook 'delete-frame-functions (lambda () (interactive)(save-some-buffers t)))
#+END_SRC


*** Provide custom buffer-cleanup functions
#+BEGIN_SRC emacs-lisp
  (defun kill-dired-buffers ()
    "Kill all dired buffers."
    (interactive)
    (mapc (lambda (buffer)
      (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
        (kill-buffer buffer)))
    (buffer-list)))

   (defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC

*** Mac-specific key-binding changes
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil))

#+END_SRC
*** Icons
#+BEGIN_SRC emacs-lisp
(use-package vscode-icon
  :ensure t
  :commands (vscode-icon-for-file))
#+END_SRC
** Buffer Colorize
#+BEGIN_SRC emacs-lisp
;; load package
(require 'ansi-color)

;; function for colorizing
(defun colorize-buffer ()
  (interactive)
  (toggle-read-only)
  (ansi-color-apply-on-region (point-min) (point-max))
  (toggle-read-only))

;; add hook to apply the function when magit mode is enabled
(add-hook 'magit-mode-hook 'colorize-buffer)
#+END_SRC

** Ediff
We don't want that annoying floating frame that ediff uses by default.

#+BEGIN_SRC emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

** Package Configuration
*** General
#+BEGIN_SRC emacs-lisp
(use-package monokai-theme
  :ensure t
  :config
  (load-theme 'monokai t))

(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :demand
  :config
  (global-undo-tree-mode)
  :bind(("C-z" . undo-tree-undo)
        ("C-M-z" . undo-tree-redo)))

(use-package dired-subtree
  :ensure t)

(use-package hydra
  :ensure t)

(use-package dired-sidebar
  :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :init
  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))
  :config
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

  (setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-theme 'vscode)
  (setq dired-sidebar-use-term-integration t)
  (setq dired-sidebar-use-custom-font t))

(use-package ibuffer
  :bind( "C-x C-b" . ibuffer))

(use-package ibuffer-sidebar
  :after (ibuffer)
  :ensure t)

(use-package smex
  :ensure t)

(use-package dedicated
  :ensure t)

(use-package ace-window
  :ensure t
  :bind([remap other-window] . ace-window)
  :init
  (setq aw-dispatch-always t)
  :config
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0))))))


(use-package switch-buffer-functions
  :ensure t
  :init
  (add-hook 'switch-buffer-functions (lambda (prev cur)
                                       (interactive)
                                       (save-some-buffers t))))

(use-package adaptive-wrap
  :ensure t)

(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :hook
  (prog-mode . yas-minor-mode)
  :config
  (yas-reload-all))

(use-package yasnippet-snippets
  :ensure t)

(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :ensure t
  :config
  (setq exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize))

(use-package visual-regexp
  :ensure t)

(use-package smartparens
  :ensure t
  :init
  (require 'smartparens-config)
  :config
  (sp-use-smartparens-bindings)
  (smartparens-global-mode 1))

(use-package projectile
  :ensure t
  :demand
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map))
  :init
  (setq projectile-switch-project-action 'projectile-vc)
  (setq projectile-mode-line
        '(:eval
          (format " Pr[%s]"
                  (projectile-project-name))))
  :config
  (projectile-mode))

(use-package diminish
  :ensure t
  :config
  (diminish 'auto-revert-mode))


(use-package restclient
  :ensure t
  :mode ("\\.rest\\'" . restclient-mode))

(use-package company-restclient
  :ensure t
  :hook (restclient-mode . (lambda ()
                             (add-to-list 'company-backends 'company-restclient))))

(use-package olivetti
  :ensure t
  :init
  (setq olivetti-body-width 80))

;;If yousing emacs-mac by Yamamoto this will allow ligatures
(if (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode))

#+END_SRC

**** ssh-agency
with oh-my-zsh, I sometimes get weird issues with the ssh agent and magit.  this ensures that an agent is started in the emacs context
#+BEGIN_SRC emacs-lisp
(use-package ssh-agency
  :ensure t)
#+END_SRC

**** Terminal
There are other terminals available, but vterm seems more responsive and more native of a choice
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :ensure t
  :init
  (defalias 'ansi-term (lambda (&rest _) (call-interactively #'vterm)))
  (defalias 'term (lambda (&rest _) (call-interactively #'vterm))))

(use-package shell-pop
  :ensure t
  :bind (("C-t" . shell-pop))
  :config
  (defun shell-pop--set-exit-action ()
    (if (string= shell-pop-internal-mode "eshell")
        (add-hook 'eshell-exit-hook 'shell-pop--kill-and-delete-window nil t)
      (let ((process (get-buffer-process (current-buffer))))
        (when process
          (set-process-sentinel
           process
           (lambda (_proc change)
             (when (string-match-p "\\(?:finished\\|exited\\)" change)
               (if (one-window-p)
                   (switch-to-buffer shell-pop-last-buffer)
                 (kill-buffer-and-window)))))))))

  (custom-set-variables
   '(shell-pop-shell-type (quote ("vterm" "*vterm*" (lambda nil (vterm)))))
   '(shell-pop-term-shell "/usr/local/bin/zsh")
   '(shell-pop-window-position "bottom")))
#+END_SRC

**** FlyCheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :defer 1
  :diminish (flycheck-mode . "Fly")
  :config
  (add-to-list 'flycheck-checkers 'lsp-ui)
  :hook
  (after-init . global-flycheck-mode))
#+END_SRC

**** MU4E
NOTE: This is still a bit experimental, but the basics function.  Lots of improvements are still possible.
My Configuration for mbsync and msmtp can be found here:
https://sethmdoty.gitbook.io/tech-tips/emacs/m4ue
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
(use-package mu4e
  :config
  (setq mu4e-mu-binary "/usr/local/bin/mu")
  (setq user-full-name "Seth Doty")
  (setq user-mail-address "sethmdoty@posteo.net")
  (setq mail-user-agent 'mu4e-user-agent)
  (setq mu4e-maildir "~/.mbox")
  (setq mu4e-refile-folder "/posteo/Archive")
  (setq mu4e-sent-folder "/posteo/Sent")
  (setq mu4e-trash-folder "/posteo/Trash")
  (setq mu4e-get-mail-command "/usr/local/bin/mbsync -a")
  (setq mu4e-update-interval 300)
  (setq mu4e-use-fancy-chars t)
  (setq mail-user-agent 'mu4e-user-agent)
  (setq mu4e-org-contacts-file "~/Documents/org/contacts.org")
    :config
  (add-to-list 'mu4e-headers-actions '("org-contact-add" . mu4e-action-add-org-contact) t)
  (add-to-list 'mu4e-view-actions '("org-contact-add" . mu4e-action-add-org-contact) t)
  ;; We could get duplicate UIDs from mbsync if we don't do this
  (setq mu4e-change-filenames-when-moving t)
  ;; org mode links
  (setq org-mu4e-link-query-in-headers-mode nil)
  ;; This enabled the thread like viewing of emails.
  (setq mu4e-headers-include-related t)
  (setq mu4e-attachment-dir  "~/Downloads")
  ;; This prevents saving the email to the Sent folder since my email will do this for us on their end.
  ;; (setq mu4e-sent-messages-behavior 'delete)
  ;;so many buffers...
  (setq message-kill-buffer-on-exit t)
  ;; Enable inline images.
  (setq mu4e-view-show-images t)
  ;; Sometimes html email is just not readable in a text based client, this lets me open the
  ;; email in my browser.
  (defun jcs-view-in-eww (msg)
  (eww-browse-url (concat "file://" (mu4e~write-body-to-html msg))))
   ;; Arrange to view messages in either the default browser or EWW
  (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
  (add-to-list 'mu4e-view-actions '("Eww view" . jcs-view-in-eww) t)
  ;; Get some Org functionality in compose buffer
  (add-hook 'message-mode-hook 'turn-on-orgtbl)
  (add-hook 'message-mode-hook 'turn-on-orgstruct++)
  ;; Spell checking, because spelling is hard.
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
  ;; Prefer Plain Text over HTML
  (setq mu4e-view-html-plaintext-ratio-heuristic  most-positive-fixnum)
  ;;let the text flow
  (setq mu4e-compose-format-flowed t)
  (add-hook 'mu4e-compose-mode-hook 'visual-clean)  
  ;; Configure sending mail.
  (setq mu4e-compose-format-flowed t)
  (setq message-send-mail-function 'message-send-mail-with-sendmail
	sendmail-program "/usr/local/bin/msmtp")
	
  ;; Bookmarks for common searches that I use.
  (setq mu4e-bookmarks '(("(maildir:/icloud/inbox OR maildir:/gmail/inbox OR maildir:/posteo/INBOX)" "Inbox" ?i)
			 ("flag:unread" "Unread messages" ?u)
			 ("date:today..now" "Today's messages" ?t)
			 ("date:7d..now" "Last 7 days" ?w)
			 ("mime:image/*" "Messages with images" ?p))))
;; icloud, posteo, and gmail contexts
(setq mu4e-contexts
      `( ,(make-mu4e-context
          :name "gmail"
          :enter-func (lambda () (mu4e-message "Entering Gmail context"))
          :leave-func (lambda () (mu4e-message "Leaving Gmail context"))
          ;; we match based on the maildir of the message
		  :match-func (lambda (msg)
                        (when msg
                          (string-match-p "^/gmail" (mu4e-message-field msg :maildir))))
          :vars '( ( user-mail-address . "seth.doty@objectpartners.com"  )
				   (smtpmail-smtp-user . "seth.doty@objectpartners.com")
				   ( smtpmail-smtp-server . "smtp.gmail.com" )
                   ( user-full-name . "Seth Doty" )
				   ( mu4e-trash-folder . "/gmail/[Gmail].Trash" )
				   ( mu4e-refile-folder . "/gmail/[Gmail].Archive" )
				   ( mu4e-drafts-folder . "/gmail/[Gmail].Drafts" )
                   ( mu4e-compose-signature .
                     (concat
                       "Seth Doty\n"))))
       ,(make-mu4e-context
          :name "posteo"
          :enter-func (lambda () (mu4e-message "Entering the posteo context"))
		  :leave-func (lambda () (mu4e-message "Leaving posteo context"))
          ;; we match based on the maildir of the message
          :match-func (lambda (msg)
                        (when msg
                          (string-match-p "^/posteo" (mu4e-message-field msg :maildir))))
          :vars '( ( user-mail-address . "sethmdoty@posteo.net" )
				   ( smtpmail-smtp-user . "sethmdoty@posteo.net" )
				   ( smtpmail-smtp-server . "" )
                   ( user-full-name . "Seth Doty" )
				   ( mu4e-trash-folder . "/posteo/Trash" )
				   ( mu4e-refile-folder . "/posteo/Archive" )
				   ( mu4e-drafts-folder . "/posteo/Drafts" )
                   ( mu4e-compose-signature  .
                     (concat
                       "Seth Doty\n"))))
       ,(make-mu4e-context
          :name "icloud"
          :enter-func (lambda () (mu4e-message "Entering the icloud context"))
		  :leave-func (lambda () (mu4e-message "Leaving icloud context"))
          ;; we match based on the maildir of the message
          :match-func (lambda (msg)
                        (when msg
                          (string-match-p "^/icloud" (mu4e-message-field msg :maildir))))
          :vars '( ( user-mail-address . "sethmdoty@icloud.com" )
				   ( smtpmail-smtp-user . "sethmdoty@icloud.com" )
				   ( smtpmail-smtp-server . "" )
                   ( user-full-name . "Seth Doty" )
				   ( mu4e-trash-folder . "/icloud/Deleted Messages" )
				   ( mu4e-refile-folder . "/icloud/Archive" )
				   ( mu4e-drafts-folder . "/icloud/Drafts" )
                   ( mu4e-compose-signature  .
                     (concat
                       "Seth Doty\n"))))))
 
 (use-package org-mu4e
    :ensure nil
    :custom
    (org-mu4e-convert-to-html t))

;;I need alerts.  this uses the terminal-notifier library for osx.  
;;Make sure it is in your PATH
;;Gmail makes poor choices, so I have to specificy an inbox for the alert.....
(use-package mu4e-alert
  :ensure t
  :after mu4e
  :config
  (mu4e-alert-set-default-style 'notifier)
  :init
  (setq mu4e-alert-interesting-mail-query
    (concat
     "flag:unread maildir:/icloud/INBOX"
     "OR "
     "flag:unread maildir:/posteo/INBOX"
     "OR "
     "flag:unread maildir:/gmail/INBOX"
     ))
  (mu4e-alert-enable-mode-line-display)
  (defun gjstein-refresh-mu4e-alert-mode-line ()
    (interactive)
    (mu4e~proc-kill)
    (mu4e-alert-enable-mode-line-display)
    )

  ;; display stuff on modeline as well as notify
  (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
  (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display))
#+END_SRC
***** MU4E Encryption
#+BEGIN_SRC emacs-lisp
(require 'mml2015)
(require 'epa-file)

(defun encrypt-message (&optional arg)
  (interactive "p")
  (mml-secure-message-encrypt-pgp))

(defun decrypt-message (&optional arg)
  (interactive "p")
  (epa-decrypt-armor-in-region (point-min) (point-max)))

(defalias 'ec 'encrypt-message)
(defalias 'dc 'decrypt-message)
#+END_SRC
**** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :demand
    :diminish helm-mode
    :init
    :bind(("C-x f" . helm-recentf)
    ("C-x b" . helm-mini)
    ("C-c s" . helm-occur)
    ("C-c S" . helm-moccur)
    ("C-x C-b" . helm-buffers-list)
    ("C-x C-f" . helm-find-files)
    ("C-x C-r" . helm-resume))
    :config
    (helm-mode 1))

  (use-package helm-swoop
    :after (helm)
    :ensure t
    :bind
    (("M-i" . helm-swoop)
     ("C-c M-i" . helm-multi-swoop)
     ("M-I" . helm-swoop-back-to-last-point)
     ("C-x M-i" . helm-multi-swoop-all)))

  (use-package helm-smex
    :ensure t
    :after (helm smex)
    :init
    (setq helm-smex-show-bindings t)
    :bind(([remap execute-extended-command] . helm-smex)
    ("M-X" . helm-smex-major-mode-commands)))

  (use-package helm-projectile
    :ensure t
    :after (projectile helm)
    :config
    (helm-projectile-on))

  (use-package helm-flx
    :ensure t
    :after (helm)
    :config
    (helm-flx-mode +1))

  (use-package helm-fuzzier
    :ensure t
    :after (helm)
    :config
    (helm-fuzzier-mode +1))

  (use-package helm-ag
    :ensure t
    :after (helm))
  
  (use-package helm-rg
    :ensure t
    :after (helm))

  (use-package helm-mu
    :ensure t
    :after (helm))

  (use-package helm-company
    :ensure t
    :after (helm company)
    :bind (:map company-mode-map ("C-:" . helm-company)
           :map company-active-map ("C-:" . helm-company)))

#+END_SRC

**** Git
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init
  (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1 )
  :bind("C-x g" . magit-status)
  :config
  ;; Protect against accident pushes to upstream
  (defadvice magit-push-current-to-upstream
(around my-protect-accidental-magit-push-current-to-upstream)
    "Protect against accidental push to upstream.

    Causes `magit-git-push' to ask the user for confirmation first."
    (let ((my-magit-ask-before-push t))
ad-do-it))

  (defadvice magit-git-push (around my-protect-accidental-magit-git-push)
    "Maybe ask the user for confirmation before pushing.

    Advice to `magit-push-current-to-upstream' triggers this query."
    (if (bound-and-true-p my-magit-ask-before-push)
  ;; Arglist is (BRANCH TARGET ARGS)
  (if (yes-or-no-p (format "Push %s branch upstream to %s? "
         (ad-get-arg 0) (ad-get-arg 1)))
      ad-do-it
    (error "Push to upstream aborted by user"))
ad-do-it))

  (ad-activate 'magit-push-current-to-upstream)
  (ad-activate 'magit-git-push))

(use-package forge
  :ensure t
  :after magit)

(use-package git-link
  :ensure t)

(use-package gitignore-mode
  :ensure t)

(use-package diff-hl
  :ensure t
  :config
  (global-diff-hl-mode))
#+END_SRC

**** Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :pin org
    :init
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-confirm-babel-evaluate nil)
    (setq org-src-window-setup 'current-window)
    (setq org-startup-folded nil)
    (setq org-edit-src-content-indentation 0)
    (setq org-startup-indented t)
    (setq org-fontify-whole-heading-line t)
    (setq org-pretty-entities t)
    (setq org-hide-leading-stars t)
    (setq org-agenda-files (list "~/Documents/org"))
    :bind
    (("C-c l" . 'org-store-link)
     ("C-c a" . 'org-agenda)
     ("C-c c" . 'org-capture))
    :config
    (setq org-directory "~/Documents/org/")
     ;; Split up the search string on whitespace
    (setq org-agenda-search-view-always-boolean t)
    ;;Do not make last capture bookmarks.  I do not like them
    (setq org-capture-bookmark nil)
    ;;Set Keywords
      (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
          (sequence "WAITING(w)" "|" "CANCELLED(c)")))
    ;; Log when task complete
    (setq org-log-done t)
    ;; Behaviour for capturing notes using make-capture-frame
    (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (defadvice org-switch-to-buffer-other-window
      (after supress-window-splitting activate)
    "Delete the extra window if we're in a capture frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-other-windows)))
    ;;What languages do we care to do
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((restclient . t)
       (browser . t)
       (shell . t)
       (scheme . t)
       (gnuplot . t)
       (plantuml . t)
       (js . t))))

    (use-package org-protocol)
    
    (use-package ob-restclient
      :ensure t)

    (use-package ob-browser
      :ensure t)
    
    (use-package org-super-agenda
      :ensure t)
    
    (use-package toc-org
      :ensure t
      :after org
      :hook (org-mode . toc-org-enable))
#+END_SRC
***** Org Crypt
This allows me to encrypt the text of an entry, but not the headline, properties, etc.  Any text below a headline that has a :crypt: tag
will be automatically encrypted when saved. Preventing tag inheritance prevevts encrypted text inside encrypted text.  More can be found in the org
mode manual here: https://orgmode.org/worg/org-tutorials/encrypting-files.html
#+BEGIN_SRC emacs-lisp
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key nil)
#+END_SRC
***** Org-cliplink
org-cliplink lets you insert a link from your clipboard with a title fetched from the pages metadata
#+BEGIN_SRC emacs-lisp
(use-package org-cliplink
  :ensure t
  :bind ("C-x p i" . org-cliplink))
#+END_SRC
***** Org Capture Templates
(t) allows me to capture general tasks.  It has some basic link features to show the source
(l) creates web bookmark entries.  Uses org-cliplink to auto capture the link from your clipboard.  It will prompt for a tag value too.  I'd like at least one by default to ensure that I can search easier later
(p) allows me to add projects
(j) creates a journal entry
(c) is a contact entry
(f) captures emails I may need to follow up on.  It links directly to the message ID from mu4e
#+BEGIN_SRC emacs-lisp
(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal's top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))

(use-package org-capture
  :ensure nil
  :after org
  :preface
  (defvar my/org-basic-task-template "* TODO %a %^{Task}
:PROPERTIES:
:SOURCE:
:END:
Captured %<%Y-%m-%d %H:%M>" "Template for basic task.")

  (defvar my/org-contacts-template "* %(org-contacts-template-name)
:PROPERTIES:
:ADDRESS: %^{111 Street Street. Omaha,NE, USA}
:BIRTHDAY: %^{yyyy-mm-dd}
:EMAIL: %(org-contacts-template-email)
:NOTE: %^{NOTE}
:END:" "Template for org-contacts.")

  (defvar my/org-project-template "* TODO [#A] %^{Task}
:PROPERTIES:
:END:
Captured %<%Y-%m-%d %H:%M>" "Template for project task.")

 (defvar my/org-web-bookmark-template "* %(org-cliplink-capture) :%^{Tag}:
:PROPERTIES:
:BOOKMARK:
:CREATED %U
:END:")

  :custom
  (org-capture-templates
    `(("l" "Links" entry (file+headline "~/Documents/org/links.org" "Links"),
      my/org-web-bookmark-template
      :empty-lines 1)

     ("c" "Contact" entry (file+headline "~/Documents/org/contacts.org" "Contacts"),
      my/org-contacts-template
      :empty-lines 1)
     
     ("p" "Project Entry" entry (file "~/Documents/org/projects.org"),
      my/org-project-template
      :empty-lines 1)

     ("j" "Journal entry" entry (function org-journal-find-location)
       "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")

     ("f" "File email (mu4e)" entry (file+headline "~/Documents/org/todo.org" "Email")
                   "* %a by [[mailto:%:fromaddress][%:fromname]]\n%U\n\n%i%?\n")

     ("t" "Task" entry (file+headline "~/Documents/org/todo.org" "Tasks"),
      my/org-basic-task-template
      :empty-lines 1))))
#+END_SRC
***** Org Journal
#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :after org
  :ensure t
  :bind (("C-c T" . org-journal-new-entry)
         ("C-c Y" . journal-file-yesterday))
  :preface
  (defun get-journal-file-yesterday ()
    "Gets filename for yesterday's journal entry."
    (let* ((yesterday (time-subtract (current-time) (days-to-time 1)))
           (daily-name (format-time-string "%Y%m%d" yesterday)))
      (expand-file-name (concat org-journal-dir daily-name))))

  (defun journal-file-yesterday ()
    "Creates and load a file based on yesterday's date."
    (interactive)
    (find-file (get-journal-file-yesterday)))
  :custom
  (org-journal-date-format "%e %b %Y (%A)")
  (org-journal-dir (format "~/Documents/org/journal/" (format-time-string "%Y")))
  (org-journal-enable-encryption t)
  (org-journal-file-format "%Y%m%d")
  (org-journal-time-format ""))
#+END_SRC
***** Org Contacts
#+BEGIN_SRC emacs-lisp
(use-package org-contacts
  :ensure nil
  :after org
  :custom (org-contacts-files '("~/Documents/org/contacts.org")))
#+END_SRC
***** Org Superstar
Its like org-bullets, but better
#+BEGIN_SRC emacs-lisp
(use-package org-superstar
  :ensure t
  :init
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))) 
#+END_SRC
***** Org Caldav
#+BEGIN_SRC emacs-lisp
;; Tracking this bug: https://github.com/dengste/org-caldav/issues/189
;; (use-package org-caldav
;;   :after org
;;   :ensure t
;;   :init
;;  ;; This is the sync on close function; it also prompts for save after syncing so 
;;  ;; no late changes get lost 
;;   (defun org-caldav-sync-at-close ()
;;    (org-caldav-sync)
;;    (save-some-buffers))
  
;;   ;;This is the delayed sync function; it waits until emacs has been idle for 
;;   ;;"secs" seconds before syncing.  The delay is important because the caldav-sync
;;   ;;can take five or ten seconds, which would be painful if it did that right at save.  
;;   ;;This way it just waits until you've been idle for a while to avoid disturbing 
;;   ;;the user.
;;   (defvar org-caldav-sync-timer nil
;;     "Timer that `org-caldav-push-timer' used to reschedule itself, or nil.")
;;   (defun org-caldav-sync-with-delay (secs)
;;    (when org-caldav-sync-timer
;;      (cancel-timer org-caldav-sync-timer))
;;    (setq org-caldav-sync-timer
;; 	 (run-with-idle-timer
;; 	  (* 1 secs) nil 'org-caldav-sync)))
  
;;   ;;Actual calendar configuration edit this to meet your specific needs
;;   (setq org-caldav-url "https://posteo.de:8443/calendars/sethmdoty/default/")
;;   (setq org-caldav-calendars
;;     '((:calendar-id "default"
;; 	    	:files ("~/Documents/org/posteo-default.org")
;; 		:inbox "~/Documents/org/org-caldav-inbox.org")))
;; 	(setq org-caldav-backup-file "~/Documents/org/org-posteo-backup.org")
;;   (setq org-caldav-save-directory "~/Documents/org/org-caldav/"))
;;   :config
;;   (setq org-icalendar-alarm-time 1)
;;   ;;This makes sure to-do items as a category can show up on the calendar
;;   (setq org-icalendar-include-todo t)
;;   ;;This ensures all org "deadlines" show up, and show up as due dates
;;   (setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due))
;;   ;;This ensures "scheduled" org items show up, and show up as start times
;;   (setq org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo))
;;   ;;Add the delayed save hook with a five minute idle timer
;;   (add-hook 'after-save-hook
;; 	   (lambda ()
;; 	     (when (eq major-mode 'org-mode)
;; 		(org-caldav-sync-with-delay 300))))
;;   ;;Add the close emacs hook
;;   (add-hook 'kill-emacs-hook 'org-caldav-sync-at-close))
#+END_SRC
**** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :diminish company-mode
  :defer 0.5
  :delight
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-quickhelp
  :ensure t
  :after (company)
  :config
  (company-quickhelp-mode))
#+END_SRC
**** Deft
I need a better way to search through my org notes.  If I can find it with this, a ripgrep will usually get the job done.
#+BEGIN_SRC emacs-lisp
(use-package deft
  :ensure t
  :bind ("<f8>" . deft)
  :commands (deft)
  :config
  (setq deft-extensions '("txt" "tex" "org"))
  (setq deft-directory "~/Documents/org")
  (setq deft-recursive t)
  (setq deft-use-filename-as-title t))
#+END_SRC
**** Perspective Mode
I wish I had a way to remember my layout and open buffers...O wait! This is the way
#+BEGIN_SRC emacs-lisp
(use-package perspective
  :ensure t
  :config
  (persp-mode))
#+END_SRC
*** Languages
**** Docker
#+BEGIN_SRC emacs-lisp
(use-package docker-compose-mode
  :ensure t)
(use-package dockerfile-mode
  :ensure t)
(use-package dotenv-mode
  :ensure t)
#+END_SRC
**** Shell
#+BEGIN_SRC emacs-lisp
;;Make sure you have shellcheck installed for this to work
(use-package flymake-shellcheck
  :commands flymake-shellcheck-load
  :init
  (add-hook 'sh-mode-hook 'flymake-shellcheck-load))

;;This makes your shell script executable after you save
(use-package sh-script
  :ensure nil
  :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+END_SRC
**** Golang
#+BEGIN_SRC emacs-lisp
(defun my-go-mode-hook ()
  (add-hook 'before-save-hook 'gofmt-before-save))
(use-package go-mode
  :ensure t
  :hook (go-mode-hook my-go-mode-hook))
(use-package company-go
  :ensure t)
(use-package flymake-go
  :ensure t)
#+END_SRC
**** LSP Mode
Lsp allows us to utilize the same interface to multiple languages

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands lsp
  :config
  :hook 
   (js-mode . lsp)
   (terraform-mode . lsp)
   (rust-mode . lsp)
   (python-mode . lsp)
   (sh-mode . lsp))

(use-package lsp-rust
   :after lsp-mode)

(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)

(use-package helm-lsp
  :ensure t
  :commands helm-lsp-workspace-symbol)

(use-package company-lsp
  :ensure t
  :commands company-lsp
  :config
  (push 'company-lsp company-backends)
  :custom
   (company-lsp-enable-snippet t)
   (company-lsp-cache-candidates t))
#+END_SRC

**** Javascript
#+BEGIN_SRC emacs-lisp
(setq js-switch-indent-offset 2)
(setq js-indent-level 2)

(add-to-list 'auto-mode-alist '("\\.js\\'" . js-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . js-mode))
(add-to-list 'auto-mode-alist '("\\.ts\\'" . js-mode))
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . js-mode))

(use-package js2-mode
  :ensure t
  :init
  (setq js2-mode-show-parse-errors nil)
  (setq js2-mode-show-strict-warnings nil)
  :hook
  (js-mode . js2-minor-mode))

(use-package eslint-fix
  :ensure t)

(use-package js2-refactor
  :ensure t
  :hook (js-mode . js2-refactor-mode)
  :config
  (js2r-add-keybindings-with-prefix "C-c C-m"))

(use-package add-node-modules-path
  :ensure t
  :hook (js-mode . add-node-modules-path))

(use-package indium
  :ensure t
  :diminish (indium-interaction-mode . "In" )
  :hook (js-mode . indium-interaction-mode))

(use-package prettier-js
   :ensure t
   :after add-node-modules-path
   :hook (js-mode . prettier-js-mode))
#+END_SRC

**** JSON
#+BEGIN_SRC emacs-lisp
  ;;JSON
  (use-package json-mode
    :ensure t
    :mode (("\\.json\\'" . json-mode)
     ("\\manifest.webapp\\'" . json-mode )
     ("\\.tern-project\\'" . json-mode)))
#+END_SRC
**** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
   :ensure t
   :init
   (setq rust-format-on-save t))

(use-package lsp-rust
  :demand t
  :after rust-mode)

(use-package flycheck-rust
  :ensure t
  :hook (flycheck-mode-hook #'flycheck-rust-setup))

(use-package cargo
  :ensure t
  :hook (rust-mode cargo-minor-mode))

;; Toml:
(use-package toml-mode
  :defer t
  :config (progn (add-hook 'toml-mode-hook 'prog-minor-modes-common)))

;;Lets use the new lsp
(setq lsp-rust-server 'rust-analyzer)
;;Various quality of life settings for rust
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
(add-hook 'rust-mode-hook 'lsp)
(add-hook 'rust-mode-hook 'company-mode)
(add-hook 'flycheck-mode-hook 'flycheck-rust-setup)
#+END_SRC
**** Terraform
#+Begin_SRC emacs-lisp
  (use-package terraform-mode
    :ensure t )

  (use-package company-terraform
    :ensure t
    :config (company-terraform-init) )
#+END_SRC

**** Web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (("\\.phtml\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)
     ("\\.blade\\.php\\'" . web-mode)
     ("\\.jsp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.html?\\'" . web-mode)
     ("\\.ejs\\'" . web-mode)
     ("\\.php\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("/\\(views\\|html\\|theme\\|templates\\)/.*\\.php\\'" . web-mode))
    :init
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-attr-value-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-comment-keywords t)
    (setq web-mode-enable-current-element-highlight t))

  (use-package company-web
    :ensure t
    :hook (web-mode . (lambda ()
      (add-to-list 'company-backends 'company-web-html)
      (add-to-list 'company-backends 'company-web-jade)
      (add-to-list 'company-backends 'company-web-slim))))

  (use-package emmet-mode
    :ensure t
    :hook (web-mode sgml-mode html-mode css-mode))

  (use-package rainbow-mode
    :ensure t
    :pin gnu
    :hook css-mode)

  (use-package simple-httpd
    :ensure t)

  (use-package impatient-mode
    :ensure t)
#+END_SRC

**** Python
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :ensure t)
  
  (use-package blacken
    :ensure t)

  (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
  
  (use-package lsp-python-ms
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp))))  ; or lsp-deferred
#+END_SRC

**** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
     ("\\.md\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode))
    :init
    (setq markdown-command "multimarkdown")
    (setq markdown-header-scaling t))
#+END_SRC

**** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t
    :mode ("\\.lua\\'" . lua-mode))

  (use-package company-lua
    :ensure t
    :init
    (add-hook 'lua-mode-hook (lambda ()
             (add-to-list 'company-backends 'company-lua))))
#+END_SRC

**** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode 
    ("\\.yaml\\'" . yaml-mode)
    ("\\.yml\\'" . yaml-mode))
#+END_SRC

** Review and remove
**** Ledger mode
 I'm experimenting with ledger financial system
 #+BEGIN_SRC emacs-lisp
(use-package ledger-mode
  :ensure t
  :mode ("\\.dat\\'"
         "\\.ledger\\'")
  :bind (:map ledger-mode-map
              ("C-x C-s" . my/ledger-save))
  :hook (ledger-mode . ledger-flymake-enable)
  :preface
  (defun my/ledger-save ()
    "Automatically clean the ledger buffer at each save."
    (interactive)
    (ledger-mode-clean-buffer)
    (save-buffer))
  :custom
  (ledger-clear-whole-transactions t)
  (ledger-reconcile-default-commodity "USD")
  (ledger-reports
   '(("account statement" "%(binary) reg --real [[ledger-mode-flags]] -f %(ledger-file) ^%(account)")
     ("balance sheet" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) bal ^assets ^liabilities ^equity")
     ("budget" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:budget")
     ("budget goals" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget goals'")
     ("budget obligations" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget obligations'")
     ("budget debts" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget debts'")
     ("cleared" "%(binary) cleared [[ledger-mode-flags]] -f %(ledger-file)")
     ("equity" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) equity")
     ("income statement" "%(binary) --invert --real -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^income ^expenses -p \"this month\""))
   (ledger-report-use-header-line nil)))

(use-package flycheck-ledger
  :ensure t 
  :after ledger-mode)
 #+END_SRC
